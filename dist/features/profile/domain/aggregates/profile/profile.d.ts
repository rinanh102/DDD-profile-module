import { Nullable } from '@cbidigital/heron-common';
import { AggregateRoot, EavAttributeValue, EavEntity } from '@cbidigital/aqua';
import { GenderEnum, CreateProfileInput, CreateProfileOutput, DeleteProfileInput, DeleteProfileOutput, ProfileStatusEnum, UpdateProfileInput, UpdateProfileOutput } from '.';
import { ProfileAddress } from './entities';
import { ProfileRelationshipType } from '../profile-relationship-type';
declare type ProfileEntityProps = {
    userId: Nullable<string>;
    firstName: Nullable<string>;
    lastName: Nullable<string>;
    email: Nullable<string>;
    gender: Nullable<GenderEnum>;
    dob: Nullable<Date>;
    phone: Nullable<string>;
    identityNum: Nullable<string>;
    avatar: Nullable<string>;
    profession: Nullable<string>;
    status: ProfileStatusEnum;
    createdAt: Date;
    updatedAt: Nullable<Date>;
    deletedAt: Nullable<Date>;
    addressInfo: Nullable<ProfileAddress>;
    parentId: Nullable<string>;
    typeId: Nullable<string>;
    type: Nullable<ProfileRelationshipType>;
    children: Nullable<Profile[]>;
    targetId: Nullable<string>;
    code: Nullable<string>;
};
export declare class Profile extends AggregateRoot<ProfileEntityProps> {
    private readonly _eav;
    get eav(): EavEntity;
    constructor(id?: string, props?: ProfileEntityProps, attributeValues?: EavAttributeValue[]);
    get userId(): Nullable<string>;
    get firstName(): Nullable<string>;
    get lastName(): Nullable<string>;
    get email(): Nullable<string>;
    get gender(): Nullable<GenderEnum>;
    get dob(): Nullable<Date>;
    get phone(): Nullable<string>;
    get identityNum(): Nullable<string>;
    get avatar(): Nullable<string>;
    get profession(): Nullable<string>;
    get status(): ProfileStatusEnum;
    get createdAt(): Date;
    get updatedAt(): Nullable<Date>;
    get deletedAt(): Nullable<Date>;
    get addressInfo(): Nullable<ProfileAddress>;
    get parentId(): Nullable<string>;
    get typeId(): Nullable<string>;
    get type(): Nullable<ProfileRelationshipType>;
    get children(): Nullable<Profile[]>;
    get targetId(): Nullable<string>;
    get code(): Nullable<string>;
    private setUserId;
    private setFirstName;
    private setLastName;
    private setEmail;
    private setGender;
    private setDob;
    private setPhone;
    private setIdentifyNum;
    private setAvatar;
    private setProfession;
    private setStatus;
    private setType;
    private setCreatedAt;
    private setUpdatedAt;
    private setDeletedAt;
    private setAddressInfo;
    private setTypeId;
    private setParentId;
    private setChildren;
    private setTargetId;
    private setCode;
    create(payload: CreateProfileInput): Promise<CreateProfileOutput>;
    update(payload: UpdateProfileInput): Promise<UpdateProfileOutput>;
    delete(payload: DeleteProfileInput): Promise<DeleteProfileOutput>;
}
export {};
